import { Client } from "./ApiClient.js";
export { Client };
export interface Suggestion {
    id: string;
    url: string;
    address: string;
}
export interface LocationSuggestion {
    id: string;
    url: string;
    location: string;
}
export declare abstract class Result<S, F> {
    readonly isSuccess: boolean;
    constructor(isSuccess: boolean);
    abstract toSuccess(): S;
    abstract toFailed(): F;
}
export declare abstract class Success<S, F> extends Result<S, F> {
    constructor();
    abstract toSuccess(): S;
    abstract toFailed(): F;
}
export declare class AutocompleteSuccess extends Success<AutocompleteSuccess, AutocompleteFailed> {
    readonly suggestions: Suggestion[];
    constructor(suggestions: Suggestion[]);
    toSuccess(): AutocompleteSuccess;
    toFailed(): AutocompleteFailed;
}
export declare class LocationSuccess extends Success<LocationSuccess, LocationFailed> {
    readonly suggestions: LocationSuggestion[];
    constructor(suggestions: LocationSuggestion[]);
    toSuccess(): LocationSuccess;
    toFailed(): LocationFailed;
}
export interface Suggestion {
    id: string;
    url: string;
    address: string;
}
export declare class GetSuccess extends Success<GetSuccess, GetFailed> {
    readonly address: AutocompleteAddress;
    constructor(address: AutocompleteAddress);
    toSuccess(): GetSuccess;
    toFailed(): GetFailed;
}
export declare class GetLocationSuccess extends Success<GetLocationSuccess, GetLocationFailed> {
    readonly location: LocationAddress;
    constructor(location: LocationAddress);
    toSuccess(): GetLocationSuccess;
    toFailed(): GetLocationFailed;
}
export declare class GetLocationFailed extends Result<GetLocationSuccess, GetLocationFailed> {
    readonly status: number;
    readonly message: string;
    constructor(status: number, message: string);
    toSuccess(): GetLocationSuccess;
    toFailed(): GetLocationFailed;
}
export declare class AutocompleteFailed extends Result<AutocompleteSuccess, AutocompleteFailed> {
    readonly status: number;
    readonly message: string;
    constructor(status: number, message: string);
    toSuccess(): AutocompleteSuccess;
    toFailed(): AutocompleteFailed;
}
export declare class LocationFailed extends Result<LocationSuccess, LocationFailed> {
    readonly status: number;
    readonly message: string;
    constructor(status: number, message: string);
    toSuccess(): LocationSuccess;
    toFailed(): LocationFailed;
}
export declare class GetFailed extends Result<GetSuccess, GetFailed> {
    readonly status: number;
    readonly message: string;
    constructor(status: number, message: string);
    toSuccess(): GetSuccess;
    toFailed(): GetFailed;
}
export interface AutocompleteOptions {
    all: boolean;
    template: string;
    top: number;
    filter: Partial<AutocompleteFilter>;
    remember: boolean;
    show_postcode: boolean;
    location: Location;
}
export interface Location {
    latitude: number;
    longitude: number;
}
export interface LocationOptions {
    template: string;
    template_outcode: string;
    template_postcode: string;
    top: number;
    filter: Partial<LocationFilter>;
}
export interface TypeaheadOptions {
    top: number;
    search: string[];
}
export interface AutocompleteFilterRadius {
    km: number;
    longitude: number;
    latitude: number;
}
export interface LocationFilterRadius {
    km: number;
    longitude: number;
    latitude: number;
}
export interface AutocompleteFilter {
    county: string;
    locality: string;
    district: string;
    town_or_city: string;
    postcode: string;
    residential: boolean;
    radius: AutocompleteFilterRadius;
}
export interface LocationFilter {
    county: string;
    country: string;
    town_or_city: string;
    area: string;
    postcode: string;
    outcode: string;
    radius: LocationFilterRadius;
}
export interface Address {
    formatted_address: string[];
    thoroughfare: string;
    building_name: string;
    sub_building_name: string;
    sub_building_number: string;
    building_number: string;
    line_1: string;
    line_2: string;
    line_3: string;
    line_4: string;
    locality: string;
    town_or_city: string;
    county: string;
    district: string;
    country: string;
}
export interface AutocompleteAddress extends Address {
    postcode: string;
    latitude: number;
    longitude: number;
    locality: string;
    residential: boolean;
}
export interface LocationAddress {
    postcode: string;
    outcode: string;
    county: string;
    country: string;
    town_or_city: string;
    area: string;
    latitude: number;
    longitude: number;
}
export interface FindAddresses {
    postcode: string;
    latitude: number;
    longitude: number;
    addresses: Address[];
}
export declare class FindSuccess extends Success<FindSuccess, FindFailed> {
    readonly addresses: FindAddresses;
    constructor(addresses: FindAddresses);
    toSuccess(): FindSuccess;
    toFailed(): FindFailed;
}
export declare class FindFailed extends Result<FindSuccess, FindFailed> {
    readonly status: number;
    readonly message: string;
    constructor(status: number, message: string);
    toSuccess(): FindSuccess;
    toFailed(): FindFailed;
}
export declare class TypeaheadSuccess extends Success<TypeaheadSuccess, TypeaheadFailed> {
    readonly results: string[];
    constructor(results: string[]);
    toSuccess(): TypeaheadSuccess;
    toFailed(): TypeaheadFailed;
}
export declare class TypeaheadFailed extends Result<TypeaheadSuccess, TypeaheadFailed> {
    readonly status: number;
    readonly message: string;
    constructor(status: number, message: string);
    toSuccess(): TypeaheadSuccess;
    toFailed(): TypeaheadFailed;
}
